// using System.Collections;
// using UnityEngine;
// using UnityEngine.XR.Interaction.Toolkit;

// public class MultiSocketSnap : MonoBehaviour
// {
//     public Transform pinL_Attach;
//     public Transform pinR_Attach;
//     private UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable grabInteractable;
    
//     private Transform socketForPinR = null;
//     private Transform socketForPinL = null;

//     void Start()
//     {
//         grabInteractable = GetComponent<UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable>();
//         if (grabInteractable != null)
//         {
//             grabInteractable.selectEntered.AddListener(OnGrabbed);
//         }
//         else
//         {
//             Debug.LogError("XRGrabInteractable kh√¥ng t√¨m th·∫•y tr√™n " + gameObject.name);
//         }
//     }

//     private void OnGrabbed(SelectEnterEventArgs args)
//     {
//         Debug.Log("Object Grabbed: " + gameObject.name);

//         if (pinL_Attach == null || pinR_Attach == null)
//         {
//             Debug.LogError("Ch∆∞a g√°n pinL_Attach ho·∫∑c pinR_Attach!");
//             return;
//         }

//         // T√¨m socket g·∫ßn nh·∫•t cho ch√¢n ph·∫£i (Pin_R)
//         socketForPinR = FindClosestSocket(pinR_Attach.position);
//         if (socketForPinR != null)
//         {
//             Debug.Log("Ch√¢n ph·∫£i (Pin_R) c·∫Øm v√†o socket: " + socketForPinR.gameObject.name);

//             // G·∫Øn Pin_R v√†o socket g·∫ßn nh·∫•t
//             transform.position += (socketForPinR.position - pinR_Attach.position);
//             transform.rotation = socketForPinR.rotation;

//             // T√¨m socket cho ch√¢n tr√°i (Pin_L), nh∆∞ng b·ªè qua socket c·ªßa ch√¢n ph·∫£i
//             StartCoroutine(AlignPinL());
//         }
//         else
//         {
//             Debug.LogError("Kh√¥ng t√¨m th·∫•y socket cho ch√¢n ph·∫£i (Pin_R)!");
//         }
//     }

//     private IEnumerator AlignPinL()
//     {
//         yield return new WaitForSeconds(0.1f);  // ƒê·ª£i ƒë·ªÉ v·ªã tr√≠ c·∫≠p nh·∫≠t

//         socketForPinL = FindClosestSocket(pinL_Attach.position, socketForPinR);
//         if (socketForPinL != null)
//         {
//             Debug.Log("Ch√¢n tr√°i (Pin_L) c·∫ßn c·∫Øm v√†o socket: " + socketForPinL.gameObject.name);

//             AdjustRotation();
//         }
//         else
//         {
//             Debug.LogError("Kh√¥ng t√¨m th·∫•y socket cho ch√¢n tr√°i (Pin_L)!");
//         }
//     }

//     //  H√†m ƒëi·ªÅu ch·ªânh g√≥c quay ƒë·ªÉ kh·ªõp v·ªõi h∆∞·ªõng socket
// private void AdjustRotation()
// {
//     if (socketForPinR == null || socketForPinL == null) return;

//     // üèπ Vector t·ª´ ch√¢n R ƒë·∫øn ch√¢n L
//     Vector3 vectorPin = (pinL_Attach.position - pinR_Attach.position).normalized;

//     // üîå Vector t·ª´ ch√¢n R ƒë·∫øn socket c·ªßa ch√¢n L
//     Vector3 vectorSocket = (socketForPinL.position - pinR_Attach.position).normalized;

//     Debug.Log("Vector gi·ªØa hai ch√¢n: " + vectorPin);
//     Debug.Log("Vector gi·ªØa ch√¢n R v√† socket L: " + vectorSocket);

//     // üìè T√≠nh g√≥c xoay
//     float angle = Vector3.SignedAngle(vectorPin, vectorSocket, Vector3.up);
//     Vector3 rotationAxis = Vector3.Cross(vectorPin, vectorSocket).normalized;

//     if (rotationAxis.magnitude < 0.001f)
//     {
//         Debug.Log("‚ö†Ô∏è Tr·ª•c quay qu√° nh·ªè, kh√¥ng c·∫ßn xoay!");
//         return;
//     }

//     Debug.Log("Tr·ª•c quay: " + rotationAxis);
//     Debug.Log("G√≥c quay: " + angle);

//     // ‚úÖ Th·ª±c hi·ªán xoay b·∫±ng c√°ch thay ƒë·ªïi rotation c·ªßa object
//     Quaternion rotationDelta = Quaternion.AngleAxis(angle, rotationAxis);
//     transform.rotation = rotationDelta * transform.rotation;

//     // ƒê·∫£m b·∫£o v·ªã tr√≠ c·ªßa ch√¢n R kh√¥ng thay ƒë·ªïi sau khi xoay
//     Vector3 pinROffset = pinR_Attach.position - transform.position;
//     transform.position = socketForPinR.position - pinROffset;

//     Debug.Log("‚öôÔ∏è ƒê√£ xoay con tr·ªü!");
// }


//     // H√†m t√¨m socket g·∫ßn nh·∫•t, c√≥ th·ªÉ lo·∫°i tr·ª´ m·ªôt socket
//     private Transform FindClosestSocket(Vector3 position, Transform excludedSocket = null)
//     {
//         UnityEngine.XR.Interaction.Toolkit.Interactors.XRSocketInteractor[] sockets = FindObjectsOfType<UnityEngine.XR.Interaction.Toolkit.Interactors.XRSocketInteractor>();
//         Transform closestSocket = null;
//         float minDistance = Mathf.Infinity;

//         Debug.Log("T√¨m socket g·∫ßn nh·∫•t cho v·ªã tr√≠: " + position);

//         foreach (var socket in sockets)
//         {
//             // Lo·∫°i b·ªè socket ƒë√£ c·∫Øm Pin_R
//             if (excludedSocket != null && socket.transform == excludedSocket)
//                 continue;

//             float distance = Vector3.Distance(position, socket.transform.position);
//             Debug.Log("Kho·∫£ng c√°ch t·ªõi " + socket.gameObject.name + ": " + distance);

//             if (distance < minDistance)
//             {
//                 minDistance = distance;
//                 closestSocket = socket.transform;
//             }
//         }

//         if (closestSocket != null)
//             Debug.Log("Socket g·∫ßn nh·∫•t: " + closestSocket.gameObject.name);
//         else
//             Debug.LogError("Kh√¥ng t√¨m th·∫•y socket n√†o!");

//         return closestSocket;
//     }
// }

using System.Collections;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class MultiSocketSnap : MonoBehaviour
{
    public Transform pinL_Attach;
    public Transform pinR_Attach;
    private UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable grabInteractable;
    
    private Transform socketForPinR = null;
    private Transform socketForPinL = null;

    void Start()
    {
        grabInteractable = GetComponent<UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable>();
        if (grabInteractable != null)
        {
            grabInteractable.selectEntered.AddListener(OnGrabbed);
            grabInteractable.selectExited.AddListener(OnReleased);
        }
        else
        {
            Debug.LogError("XRGrabInteractable kh√¥ng t√¨m th·∫•y tr√™n " + gameObject.name);
        }
    }

    private void OnGrabbed(SelectEnterEventArgs args)
    {
        Debug.Log("Object Grabbed: " + gameObject.name);

        if (pinL_Attach == null || pinR_Attach == null)
        {
            Debug.LogError("Ch∆∞a g√°n pinL_Attach ho·∫∑c pinR_Attach!");
            return;
        }

        // üìå T√¨m socket g·∫ßn nh·∫•t cho ch√¢n ph·∫£i (Pin_R)
        socketForPinR = FindClosestSocket(pinR_Attach.position);
        if (socketForPinR != null)
        {
            Debug.Log("Ch√¢n ph·∫£i (Pin_R) c·∫Øm v√†o socket: " + socketForPinR.gameObject.name);
            transform.position += (socketForPinR.position - pinR_Attach.position);
            transform.rotation = socketForPinR.rotation;

            // üìå T√¨m socket cho ch√¢n tr√°i (Pin_L), nh∆∞ng b·ªè qua socket c·ªßa ch√¢n ph·∫£i
            StartCoroutine(AlignPinL());
        }
        else
        {
            Debug.LogError("Kh√¥ng t√¨m th·∫•y socket cho ch√¢n ph·∫£i (Pin_R)!");
        }
    }

private void OnReleased(SelectExitEventArgs args)
{
    Debug.Log("Object Released: " + gameObject.name);

    if (!gameObject.activeInHierarchy)
    {
        Debug.LogWarning("GameObject ƒë√£ b·ªã t·∫Øt, th·ª±c hi·ªán xoay ngay l·∫≠p t·ª©c!");
        AdjustRotation();
        return;
    }

    StartCoroutine(DelayedAdjustRotation());
}


    private IEnumerator AlignPinL()
    {
        yield return new WaitForSeconds(0.1f);  // ƒê·ª£i ƒë·ªÉ v·ªã tr√≠ c·∫≠p nh·∫≠t

        socketForPinL = FindClosestSocket(pinL_Attach.position, socketForPinR);
        if (socketForPinL != null)
        {
            Debug.Log("Ch√¢n tr√°i (Pin_L) c·∫Øm v√†o socket: " + socketForPinL.gameObject.name);
        }
        else
        {
            Debug.LogError("Kh√¥ng t√¨m th·∫•y socket cho ch√¢n tr√°i (Pin_L)!");
        }
    }

    private IEnumerator DelayedAdjustRotation()
    {
        yield return new WaitForEndOfFrame(); // ƒê·ª£i t·ªõi cu·ªëi frame, tr√°nh b·ªã override transform

        Rigidbody rb = GetComponent<Rigidbody>();
        if (rb != null)
        {
            bool wasKinematic = rb.isKinematic;
            rb.isKinematic = true; // NgƒÉn kh√¥ng cho Unity override v·ªã tr√≠

            AdjustRotation();

            yield return new WaitForSeconds(0.1f); // Ch·ªù sau khi xoay
            rb.isKinematic = wasKinematic; // Kh√¥i ph·ª•c tr·∫°ng th√°i kinematic ban ƒë·∫ßu
        }
        else
        {
            Debug.LogWarning("Kh√¥ng t√¨m th·∫•y Rigidbody, v·∫´n ti·∫øp t·ª•c xoay.");
            AdjustRotation();
        }
    }

    private void AdjustRotation()
    {
        if (socketForPinR == null || socketForPinL == null) return;

        // üîå Vector gi·ªØa hai socket
        Vector3 vectorSocket = (socketForPinL.position - socketForPinR.position).normalized;

        // üìå Xoay con tr·ªü theo h∆∞·ªõng c·ªßa socket
        transform.rotation = Quaternion.LookRotation(vectorSocket, Vector3.up);
        
        Debug.Log("‚öôÔ∏è ƒê√£ xoay con tr·ªü v·ªÅ h∆∞·ªõng socket!");
    }

    private Transform FindClosestSocket(Vector3 position, Transform excludedSocket = null)
    {
        UnityEngine.XR.Interaction.Toolkit.Interactors.XRSocketInteractor[] sockets = FindObjectsOfType<UnityEngine.XR.Interaction.Toolkit.Interactors.XRSocketInteractor>();
        Transform closestSocket = null;
        float minDistance = Mathf.Infinity;

        Debug.Log("T√¨m socket g·∫ßn nh·∫•t cho v·ªã tr√≠: " + position);

        foreach (var socket in sockets)
        {
            if (excludedSocket != null && socket.transform == excludedSocket)
                continue;

            float distance = Vector3.Distance(position, socket.transform.position);
            Debug.Log("Kho·∫£ng c√°ch t·ªõi " + socket.gameObject.name + ": " + distance);

            if (distance < minDistance)
            {
                minDistance = distance;
                closestSocket = socket.transform; 
            }
        }

        if (closestSocket != null)
            Debug.Log("Socket g·∫ßn nh·∫•t: " + closestSocket.gameObject.name);
        else
            Debug.LogError("Kh√¥ng t√¨m th·∫•y socket n√†o!");

        return closestSocket;
    }
}
